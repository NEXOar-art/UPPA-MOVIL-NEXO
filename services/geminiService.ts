import { GoogleGenAI, GenerateContentResponse, Tool, Type } from "@google/genai";
import { API_KEY_ERROR_MESSAGE, GEMINI_TEXT_MODEL, GEMINI_CHAT_DRAFT_MODEL } from '../constants';
import { RatingHistoryEntry, UppyChatMessage } from '../types';

const API_KEY = process.env.API_KEY;

let ai: GoogleGenAI | null = null;
if (API_KEY) {
  ai = new GoogleGenAI({ apiKey: API_KEY });
} else {
  console.error(API_KEY_ERROR_MESSAGE);
}

const tools: Tool[] = [
  {
    functionDeclarations: [
      {
        name: 'getWeatherForLocation',
        description: 'Obtiene el pron√≥stico del tiempo actual para una ubicaci√≥n espec√≠fica.',
        parameters: {
          type: Type.OBJECT,
          properties: {
            location: {
              type: Type.STRING,
              description: 'La ciudad o ubicaci√≥n para la cual obtener el tiempo. Por ejemplo: "Z√°rate, Buenos Aires"',
            },
          },
          required: ['location'],
        },
      },
      {
        name: 'saveUserPreference',
        description: 'Guarda una preferencia del usuario para futuras interacciones. Usar cuando el usuario declare expl√≠citamente un gusto, aversi√≥n o requisito para sus viajes.',
        parameters: {
          type: Type.OBJECT,
          properties: {
            preference: {
              type: Type.STRING,
              description: 'La preferencia espec√≠fica declarada por el usuario. Por ejemplo: "Evitar colectivos nocturnos", "Preferir rutas con menos paradas", "No me gustan los colectivos llenos".',
            },
          },
          required: ['preference'],
        },
      },
    ],
  },
];


export const analyzeSentiment = async (text: string): Promise<'positive' | 'negative' | 'neutral' | 'unknown'> => {
  if (!ai) {
    console.warn("Gemini AI SDK not initialized due to missing API key. Sentiment analysis disabled.");
    return 'unknown';
  }

  const prompt = `Analiza el sentimiento del siguiente texto y clasif√≠calo como "positive", "negative", o "neutral". Responde solo con una de esas tres palabras. Texto: "${text}"`;

  try {
    const response: GenerateContentResponse = await ai.models.generateContent({
        model: GEMINI_TEXT_MODEL,
        contents: prompt,
    });
    const resultText = response.text.trim().toLowerCase();
    if (resultText === 'positive' || resultText === 'negative' || resultText === 'neutral') {
      return resultText;
    }
    console.warn(`Unexpected sentiment analysis response: ${resultText}`);
    return 'unknown';
  } catch (error) {
    console.error("Error analyzing sentiment with Gemini:", error);
    return 'unknown';
  }
};

export const getUppySystemInstruction = (userName: string, busLineContext: string, reportSummary: string, preferencesSummary: string): string => {
  return `
ROL Y OBJETIVO PRINCIPAL:
Tu nombre es UppY. Eres el asistente de viaje inteligente y proactivo de la plataforma "UppA". Tu objetivo fundamental no es solo responder a las consultas de los usuarios, sino anticiparte a sus necesidades para ofrecer una experiencia de viaje fluida, completa y totalmente humana. Eres la compa√±√≠a de viaje que transforma la planificaci√≥n y la ejecuci√≥n de traslados en una tarea simple y agradable. Cuando te pregunten por el clima, usa la herramienta 'getWeatherForLocation'. Si el usuario expresa una preferencia de viaje (ej. "no me gustan los colectivos de noche"), usa la herramienta 'saveUserPreference' para recordarla.

PERSONA Y TONO DE COMUNICACI√ìN (GUARDRAILS):
- Cordial y Respetuoso: Inicia siempre las interacciones con un saludo amigable y dir√≠gete al usuario por su nombre (${userName}) para crear una conexi√≥n personal. Mant√©n un tono respetuoso en todo momento.
- Atento y Emp√°tico: Escucha activamente las necesidades del usuario. Si un usuario expresa frustraci√≥n por un retraso o un inconveniente, valida sus sentimientos antes de ofrecer una soluci√≥n.
- Claro y Conciso: Proporciona informaci√≥n precisa, completa y f√°cil de entender. Evita la jerga t√©cnica y estructura las respuestas de forma l√≥gica.
- Interacci√≥n Humana: Tu di√°logo debe ser natural y fluido. Evita respuestas rob√≥ticas. El objetivo es que el usuario sienta que est√° conversando con un asistente humano experto.
- Uso de Emojis: Utiliza emojis (como ‚ú®, üöå, üìç, ‚òÄÔ∏è, üåßÔ∏è) para listas o para resaltar puntos clave, en lugar de usar asteriscos (*). Tu comunicaci√≥n debe ser visualmente atractiva.

BASE DE CONOCIMIENTO Y MEMORIA (KNOWLEDGE AND MEMORY):
- Maestr√≠a sobre la Plataforma UppA: Posees un conocimiento exhaustivo de cada funcionalidad de la plataforma. Puedes guiar al usuario paso a paso en cualquier proceso, como a√±adir un m√©todo de pago, reservar un viaje o configurar su perfil.
- Experto en Transporte (Basado en datos micros.pdf):
  - L√≠nea de Colectivo 228 (MOTSA): Dominas toda la informaci√≥n del documento, incluyendo:
    - Rutas y Ramales: Conoces la ruta principal (Pte. Saavedra - Luj√°n) y todos sus segmentos espec√≠ficos.
    - Ruta Campana - Z√°rate: Sabes que tiene 80 paradas y una duraci√≥n aproximada de 78 minutos.
    - Lista Detallada de Paradas (Ramal Campana-Z√°rate):
      - Paradas Clave en Campana: Vigalondo Y Bomberos Voluntarios, Vigalondo Y Sierra, A. Schinoni 222, Escuela T√©cnica Roberto Rocca, Estaci√≥n Campana, San Mart√≠n y Luis Costa, San Mart√≠n y G√ºemes, San Mart√≠n y Av. Mitre, Belgrano y Alberdi.
      - Paradas en Colectora Sur: Colectora Sur y Grassi, Colectora Sur y Avenida Bellomo, Colectora Sur y Avenida Lavezzari, Colectora Sur y Avenida Mitre, Colectora Sur y Magaldi, Colectora Sur y Ant√°rtida Argentina, Colectora Sur y Maip√∫.
      - Paradas en Av. Varela: Av. Rub√©n Varela y Salmini, Av. Rub√©n Varela y Av. Teniente Per√≥n, Av. Rub√©n Varela y Bertolini, Av. Ruben Varela y Sivori, Av. Ruben Varela y Av. Ameghino.
      - Paradas en Gral. Belgrano (Z√°rate): Gral. Belgrano y Alberdi (Z√°rate), Gral. Belgrano y Jean Jaures, Gral. Belgrano y Av. Mitre (Z√°rate), Gral. Belgrano y De Dominicis, Gral. Belgrano y Becerra, Gral. Belgrano y Alem (Z√°rate).
      - Paradas en Z√°rate (Centro y Avenidas): Av. Lavalle 800 (Z√°rate), Av. Lavalle 400 (Z√°rate), Leandro Alem 1200 (Z√°rate), Leandro Alem 800 (Z√°rate), Florestano Andrade Atucha 200 (Z√°rate), Av. Anta y Espa√±a (Z√°rate), Calle Juan Jos√© Paso 1100 (Z√°rate), y Centro De Transferencia De Z√°rate.
      - Otras paradas notables: Schinoni Y Miracca, Casaux Y Chapuis, Fremi Y Cassaux, Casaux Y Goujon, Doctor Salk 204, Viamonte 1299, Uruguay 642, Av. Rivadavia 1410, Jean Jaures y 3 de Febrero (Z√°rate), Av. Mitre y Gral. Paz (Z√°rate), RP 6.
    - Horarios y Frecuencias: Tienes memorizados los horarios de operaci√≥n y las frecuencias para d√≠as de semana (05:15 - 21:45, cada 30 min), s√°bados (05:15 - 21:55, cada 40 min) y domingos (05:30 - 21:30, cada 60 min).
- Memoria Conversacional: Recuerdas el contexto de la conversaci√≥n actual y las interacciones recientes para ofrecer respuestas coherentes y evitar que el usuario tenga que repetirse.
- CONTEXTO ADICIONAL: ${busLineContext}

MEMORIA ADAPTATIVA (PREFERENCIAS DEL USUARIO):
Recuerda y aplica las siguientes preferencias guardadas de ${userName} en todas tus sugerencias y respuestas. Ad√°ptate a su estilo de viaje.
${preferencesSummary || 'A√∫n no se han guardado preferencias.'}

INTELIGENCIA DE LA COMUNIDAD EN VIVO (√öLTIMOS REPORTES):
Aqu√≠ tienes un resumen de los reportes m√°s recientes de los usuarios para la l√≠nea actual. Utiliza esta informaci√≥n para responder de forma inteligente sobre el estado del servicio, demoras, seguridad, etc. Si el usuario pregunta "c√≥mo est√° el servicio" o similar, basa tu respuesta principalmente en estos datos.
${reportSummary || 'No hay reportes recientes disponibles.'}
`;
}

export const getUppyResponse = async (
  systemInstruction: string,
  history: any[]
): Promise<GenerateContentResponse> => {
  if (!ai) {
    throw new Error("El asistente IA no est√° disponible debido a un problema de configuraci√≥n (clave API).");
  }

  try {
// FIX: Moved `systemInstruction`, `tools`, and `temperature` into the `config` object to align with the Gemini API guidelines.
    const response: GenerateContentResponse = await ai.models.generateContent({
        model: GEMINI_TEXT_MODEL,
        contents: history,
        config: {
          systemInstruction: systemInstruction,
          tools: tools,
          temperature: 0.7, 
        }
    });
    return response;
  } catch (error: any) {
    console.error("Error getting Uppy response from Gemini:", error);
    throw new Error(`Error al contactar al asistente IA: ${error.message || 'Fallo en la comunicaci√≥n con el servicio.'}`);
  }
};


export const draftChatResponse = async (originalText: string): Promise<string> => {
  if (!ai) {
    console.warn("Gemini AI SDK not initialized due to missing API key. AI drafting disabled.");
    throw new Error("La funci√≥n de borrador IA no est√° disponible debido a un problema de configuraci√≥n (clave API).");
  }

  const systemInstruction = `Eres un asistente de escritura para una app de chat sobre transporte p√∫blico. 
  Tu tarea es mejorar el mensaje de un usuario. Puedes hacerlo m√°s claro, conciso, amigable, o reformularlo si es una pregunta para obtener mejores respuestas.
  Considera el contexto de un chat r√°pido y en movimiento.
  Responde √∫nicamente con el texto mejorado o la sugerencia. No incluyas saludos ni explicaciones sobre tu funci√≥n.`;
  
  const fullPrompt = `Por favor, mejora o reformula el siguiente mensaje para un chat de transporte p√∫blico: "${originalText}"`;

  try {
    const response: GenerateContentResponse = await ai.models.generateContent({
        model: GEMINI_CHAT_DRAFT_MODEL,
        contents: fullPrompt,
        config: {
          systemInstruction: systemInstruction,
          temperature: 0.7, // Slightly more creative for drafting
        }
    });
    return response.text.trim();
  } catch (error: any) {
    console.error("Error drafting chat response with Gemini:", error);
    throw new Error(`Error al generar borrador con IA: ${error.message || 'Fallo en la comunicaci√≥n con el servicio.'}`);
  }
};

// Simple in-memory cache for AI summaries to reduce API calls
const summaryCache = new Map<string, { summary: string, timestamp: number }>();
const CACHE_TTL = 5 * 60 * 1000; // 5 minutes TTL for cached summaries

export const getAiRouteSummary = async (originAddress: string, destinationAddress: string, routeInfo: string, userReportsContext: string): Promise<string> => {
    if (!ai) {
        throw new Error("El asistente IA no est√° disponible debido a un problema de configuraci√≥n (clave API).");
    }

    const cacheKey = `${originAddress.toLowerCase().trim()}|${destinationAddress.toLowerCase().trim()}`;
    const cachedEntry = summaryCache.get(cacheKey);

    if (cachedEntry && (Date.now() - cachedEntry.timestamp < CACHE_TTL)) {
        console.log("Returning cached AI route summary for:", cacheKey);
        return cachedEntry.summary;
    }

    const systemInstruction = `Eres UppA, un asistente de planificaci√≥n de viajes para una app de transporte en Argentina. 
    Tu tarea es analizar una ruta de viaje y los reportes recientes de la comunidad para dar un resumen √∫til y consejos.
    Basado en el origen, destino, detalles de la ruta, y los reportes, proporciona:
    1. Un resumen conciso (1-2 frases) del estado general del viaje.
    2. Menciona cualquier problema espec√≠fico de los reportes (demoras, incidentes, etc.) que pueda afectar la ruta.
    3. Ofrece un consejo pr√°ctico (ej. "Considera salir 10 minutos antes por la demora reportada").
    Responde en espa√±ol, de forma amigable y directa. Incorpora emojis relevantes para hacer el resumen m√°s visual (ej. üó∫Ô∏è para rutas, ‚úÖ para consejos, ‚ö†Ô∏è para alertas). No inventes informaci√≥n. Si no hay reportes, simplemente indica que el viaje parece estar sin novedades.`;

    const fullPrompt = `An√°lisis de Viaje:
    - Origen: ${originAddress}
    - Destino: ${destinationAddress}
    - Informaci√≥n de la Ruta: ${routeInfo}
    - Reportes Recientes de la Comunidad en la Zona: ${userReportsContext || "No hay reportes recientes disponibles."}
    
    Por favor, genera el resumen y consejo del viaje.`;

    try {
        const response = await ai.models.generateContent({
            model: GEMINI_TEXT_MODEL,
            contents: fullPrompt,
            config: {
                systemInstruction: systemInstruction,
                temperature: 0.6,
            }
        });
        const summary = response.text.trim();
        summaryCache.set(cacheKey, { summary, timestamp: Date.now() });
        return summary;
    } catch (error: any) {
        console.error("Error getting AI route summary from Gemini:", error);
        const errorMessage = String(error.message || error);
        // Gracefully handle rate limit errors by returning a user-friendly message
        if (errorMessage.includes('429') || errorMessage.includes('RESOURCE_EXHAUSTED')) {
            return "‚ö†Ô∏è El an√°lisis IA de la ruta no est√° disponible temporalmente por alto tr√°fico. Por favor, revisa los detalles del viaje y los reportes de la comunidad manualmente.";
        }
        // For other errors, we still throw to notify the user of a different problem
        throw new Error(`Error al generar resumen IA del viaje: ${errorMessage || 'Fallo en la comunicaci√≥n con el servicio.'}`);
    }
};

export const getReviewSummary = async (comments: string[]): Promise<string> => {
    if (!ai || comments.length === 0) {
        return "No hay suficientes comentarios para generar un resumen.";
    }

    const systemInstruction = `Eres un asistente que resume comentarios de usuarios para un servicio de transporte.
    Analiza los siguientes comentarios y genera un resumen conciso de 1-2 frases que capture los puntos clave, tanto positivos como negativos.
    Responde √∫nicamente con el resumen en espa√±ol.`;

    const fullPrompt = `Por favor, resume los siguientes comentarios de usuarios:\n- ${comments.join('\n- ')}`;

    try {
        const response = await ai.models.generateContent({
            model: GEMINI_TEXT_MODEL,
            contents: fullPrompt,
            config: {
                systemInstruction,
                temperature: 0.6,
            }
        });
        return response.text.trim();
    } catch (error) {
        console.error("Error getting AI review summary:", error);
        return "No se pudo generar el resumen.";
    }
};

export const getPredictiveAlerts = async (reviews: RatingHistoryEntry[]): Promise<string> => {
    if (!ai || reviews.length < 3) {
        return "No hay suficientes datos para generar una alerta predictiva. Se necesita m√°s feedback de la comunidad.";
    }

    const systemInstruction = `Eres un analista de datos experto para una app de transporte. Tu trabajo es identificar patrones preocupantes en las rese√±as negativas de los usuarios para generar una alerta proactiva para el equipo de operaciones.
    **El texto del comentario del usuario es la fuente de informaci√≥n m√°s importante, ya que contiene el contexto detallado del problema.** Analiza las rese√±as proporcionadas, prestando especial atenci√≥n a los comentarios.
    Busca problemas recurrentes, menciones de seguridad, higiene o comportamiento del conductor. No te limites a los n√∫meros de calificaci√≥n; profundiza en el significado de los comentarios.
    Tu respuesta debe ser una alerta clara y accionable en espa√±ol, con el formato:
    **Alerta Predictiva:** [Descripci√≥n del patr√≥n detectado]
    **Sugerencia Operativa:** [Acci√≥n recomendada para mitigar el problema]
    Si no encuentras un patr√≥n claro, indica "No se detectaron patrones de alerta significativos en los datos actuales."`;

    const reviewData = reviews.map(r => 
        `Rating: ${r.overallRating}/5. Scores: Limpieza(${r.scores.cleanliness}), Seguridad(${r.scores.safety}), Puntualidad(${r.scores.punctuality}), Amabilidad(${r.scores.kindness}). Comentario: "${r.comment || 'N/A'}"`
    ).join('\n');

    const fullPrompt = `Analiza los siguientes datos de rese√±as para generar una alerta predictiva. Enf√≥cate en los comentarios para entender el contexto real:\n${reviewData}`;

    try {
        const response = await ai.models.generateContent({
            model: GEMINI_TEXT_MODEL,
            contents: fullPrompt,
            config: {
                systemInstruction,
                temperature: 0.7,
            }
        });
        return response.text.trim();
    } catch (error) {
        console.error("Error getting AI predictive alert:", error);
        return "Error al generar la alerta predictiva.";
    }
};